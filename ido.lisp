(defun kariup? (next-pos pos)
  (let* ((nexnex-pos (mapcar #'- next-pos '(0 1))))
    (cond
      ((< (cadr nexnex-pos) 1) nil)
      ((member nexnex-pos *kabe-list*     :test #'equal) nil)
      ((member nexnex-pos *block-list*    :test #'equal) nil)
      ((member nexnex-pos *bomb-pos-list* :test #'equal) nil)
      ((equal nexnex-pos pos) nil)
      ;;((and (not (assoc next-pos *fire-list* :test #'equal))
      ;;      (assoc nexnex-pos *fire-list* :test #'equal)) nil)
      ;;((and (assoc next-pos *fire-list* :test #'equal)
      ;;      (assoc nexnex-pos *fire-list* :test #'equal)
      ;;      (> (- (cdr (assoc next-pos *fire-list* :test #'equal)) 
      ;;            (cdr (assoc nexnex-pos *fire-list* :test #'equal))) 1)) nil)
      ((and (assoc nexnex-pos *fire-list* :test #'equal)
            (>= 1 (cdr (assoc nexnex-pos *fire-list* :test #'equal)))) nil)
      (t t))))

(defun karidown? (next-pos pos)
  (let* ((nexnex-pos (mapcar #'+ next-pos '(0 1))))
    (cond
      ((< (cadr nexnex-pos) 1) nil)
      ((member nexnex-pos *kabe-list*     :test #'equal) nil)
      ((member nexnex-pos *block-list*    :test #'equal) nil)
      ((member nexnex-pos *bomb-pos-list* :test #'equal) nil)
      ((equal nexnex-pos pos) nil)
      ;;((and (not (assoc next-pos *fire-list* :test #'equal))
      ;;      (assoc nexnex-pos *fire-list* :test #'equal)) nil)
      ;;((and (assoc next-pos *fire-list* :test #'equal)
      ;;      (assoc nexnex-pos *fire-list* :test #'equal)
      ;;      (> (- (cdr (assoc next-pos *fire-list* :test #'equal)) 
      ;;            (cdr (assoc nexnex-pos *fire-list* :test #'equal))) 1)) nil)
      ((and (assoc nexnex-pos *fire-list* :test #'equal)
            (>= 1 (cdr (assoc nexnex-pos *fire-list* :test #'equal)))) nil)
      (t t))))

(defun kariright? (next-pos pos)
  (let* ((nexnex-pos (mapcar #'+ next-pos '(1 0))))
    (cond
      ((< (cadr nexnex-pos) 1) nil)
      ((member nexnex-pos *kabe-list*     :test #'equal) nil)
      ((member nexnex-pos *block-list*    :test #'equal) nil)
      ((member nexnex-pos *bomb-pos-list* :test #'equal) nil)
      ((equal nexnex-pos pos) nil)
      ;;((and (not (assoc next-pos *fire-list* :test #'equal))
      ;;      (assoc nexnex-pos *fire-list* :test #'equal)) nil)
      ;;((and (assoc next-pos *fire-list* :test #'equal)
      ;;      (assoc nexnex-pos *fire-list* :test #'equal)
      ;;      (> (- (cdr (assoc next-pos *fire-list* :test #'equal)) 
      ;;            (cdr (assoc nexnex-pos *fire-list* :test #'equal))) 1)) nil)
      ((and (assoc nexnex-pos *fire-list* :test #'equal)
            (>= 1 (cdr (assoc nexnex-pos *fire-list* :test #'equal)))) nil)
      (t t))))

(defun karileft? (next-pos pos)
  (let* ((nexnex-pos (mapcar #'- next-pos '(1 0))))
    (cond
      ((< (cadr nexnex-pos) 1) nil)
      ((member nexnex-pos *kabe-list*     :test #'equal) nil)
      ((member nexnex-pos *block-list*    :test #'equal) nil)
      ((member nexnex-pos *bomb-pos-list* :test #'equal) nil)
      ((equal nexnex-pos pos) nil)
      ;;((and (not (assoc next-pos *fire-list* :test #'equal))
      ;;      (assoc nexnex-pos *fire-list* :test #'equal)) nil)
      ;;((and (assoc next-pos *fire-list* :test #'equal)
      ;;      (assoc nexnex-pos *fire-list* :test #'equal)
      ;;      (> (- (cdr (assoc next-pos *fire-list* :test #'equal)) 
      ;;            (cdr (assoc nexnex-pos *fire-list* :test #'equal))) 1)) nil)
      ((and (assoc nexnex-pos *fire-list* :test #'equal)
            (>= 1 (cdr (assoc nexnex-pos *fire-list* :test #'equal)))) nil)
      (t t))))